import com.google.common.truth.Truth;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

class MammothMathTest {

    // 200-digit number
    public static final String SMALL_NUMBER = "123";
    public static final String LARGE_NUMBER = "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890";
    public static final String HUGE_NUMBER = "70840473506791137852019565589411105609398180094653478124619660858934228936990326286427979267977268733635903458068660539183939254291089541879549782130559762006245606560460169291270741248377634569569912239781884143573518650701570475134055739617576925262701051594196556535283844693109055952208053789114586821388604479659823822970624067993583695778425459930657007844896413293211146409973091302607226302696120780084547885412654485659889393489938331226778492363941587583729816078600895110837178725513274251230754691715462852257682988022656466505871655944403320020598258829285259183902953379880679714755623395361317639408765533231851241082893696314063034907770440927940831701617742417176014026156222879563034897259289417642030922189225392980523478559413567163709944198814492411553895221918660986655846924255643213859022098962229470747913046966461238591037713451124484751663056376269143518155079405859234989536400802729483298199877413371896859502006440104018852165241220453711494020386661596084234402467672239208871184597162872810342329672526905042478792295680445024431257366336665391695610177908954478626448938891049960604483689495623034440990721634133298345221888897494708804618360491188348010718347513487670227139261304354132285222882938894548228863432224889549533690836199966822590665355787665236485104640901548600774502627384922386347393610778970546060939002054884934980966405501559377116097083389545487903310458017785862158925749295814227112078136945368500666924451366242372125931400184295575689156671794359102111060456109660923132638506807301924166847149491792552990498688062388817255968757991775925656676939246300910033504799734030105646336776510910166058172515484887104430164607054878484345822379847477123115916624013385887713262636168433352062652480375006525634459132932351197572686216887576227187090866129891749911460306991668545444135301315795767615055094432825893568266654111521821681443899596777078024546949951382154154389336039777019041966587250125540685007875312195057994936658823187630989745";
    @Test
    public void testModuloLargeNumber_smallNumber() {
        Truth.assertThat(MammothMath.moduloLargeNumber(SMALL_NUMBER, 11)).isEqualTo(2);
    }

    @Test
    public void testModuloLargeNumber_largeNumber() {
        Truth.assertThat(MammothMath.moduloLargeNumber(LARGE_NUMBER, 5003)).isEqualTo(2692);
    }

    @Test
    public void testModuloLargeNumber_hugeNumber() {
        Truth.assertThat(MammothMath.moduloLargeNumber(HUGE_NUMBER, 9973)).isEqualTo(2116);
    }

    @Test
    public void testModuloLargeNumber_nullNumber() {
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            MammothMath.moduloLargeNumber(null, 10);
        });
    }

    @Test
    public void testModuloLargeNumber_emptyNumber() {
        Truth.assertThat(MammothMath.moduloLargeNumber("", 10)).isEqualTo(0);
    }

}